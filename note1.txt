Client ---------- [filter][filter][filter]   ----------  Server[dispatcher servlet -> helper controller -> @Service -> @Repository] ---- db



             
#Servelet filters: 
-- A Servlet filter is a component in Java Servlet technology that intercepts incoming requests and outgoing responses to perform some pre-processing or post-processing tasks. It provides a way to modify or enhance the request/response handling process before the request reaches the servlet or after the servlet generates the response.

--Spring security framework is based on these servelet filters



-------------------------------------------------------------------------------------


-- there is a filter called "UsernamePasswordAuthenticationFilter" which will extract the username and password from the user and build the "Authenication" object.

--here Authentication is an interface and its implementaion class name is "UsernamePasswordAuthentionToken".

--after creating the object of Authentication, this filter will call a method of AuthenticationManager(I) called.


##########Authentication authenticate (Authentication auth);

--here AuthenticationManager is an interface and the implementation class name is "ProviderManager"

--this authenticate(-) method will check with various supported AuthenticationProviders and then this authenticate(-) method will call another



##########Authentication authenticate (Authentication auth);
method on the implementation  of appropriate AuthenticationProvider.

--the default implementation of AuthenticationProvider is DAOAuthenticationProvider.

Note: we can define our own AuthenticationProvider implementation also.

--this Default DAOAuthenticationProvider will take the help of UserDetailsService.

--inside the UserDetailsSerice interface, there is only one abstract method called.

#############UserDetails loadUserByUsername(String username);

--we can implement this interface and return the UserDetails object based on our requirement.

--By default Spring Security hf/w has proovided an implementation class of this UserDetailService interface which is "InMemoryUserDetailsService"

Spring Security has provided the implementation of UserDetails interface also, the name of this implementation class is "User"

--developer can implement this UserDetails interface and customize this User details object also.

--develoepr can implement this UserDetails interface and customize this User details object also.

--Once AuthenticationManager will get the Authentication object after successfull authentication then AM will populate the Principle object inside this Authentication object and keep this Authentication object inside the SecurityContext object.

######Principle object will represent the Authenticate User.




***************************Basic Authentication Filter*********************************
--------------------------------------------------------------------------------------


this filter is responsible for processing any request that has a HTTP request header of Authorization scheme of Basec and a Base64-encoded username:password token. For example, to authenticate user "bob" with password "1234" the following header would be presented:

Authorization: Basic QWxhZGRpbjpvcGVuIHNIHSKJJD




 
































